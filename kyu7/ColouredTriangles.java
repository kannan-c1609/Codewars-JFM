package main.java.kyu7;

/**
 * 7 kyu - Coloured Triangles
 *
 * https://www.codewars.com/kata/5a25ac6ac5e284cfbe000111
 *
 * Details:
 *
 *
 * If you finish this kata, you can try Insane Coloured Triangles by Bubbler, which is a much
 * harder version of this one.
 *
 * A coloured triangle is created from a row of colours, each of which is red, green or blue.
 * Successive rows, each containing one fewer colour than the last, are generated by considering
 * the two touching colours in the previous row. If these colours are identical, the same colour
 * is used in the new row. If they are different, the missing colour is used in the new row. This
 * is continued until the final row, with only a single colour, is generated.
 *
 * You will be given the first row of the triangle as a string and its your job to return the final
 * colour which would appear in the bottom row as a string. In the case of the example above, you
 * would the given RRGBRGBB you should return G.
 *
 *     The input string will only contain the uppercase letters R, G, B and there will be at least
 *     one letter so you do not have to test for invalid input.
 *     If you are only given one colour as the input, return that colour.
 *
 * Adapted from the 2017 British Informatics Olympiad
 */

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class ColouredTriangles {
    public static char triangle(final String row) {
        if (row.length() == 1) return row.charAt(0);

        int currentLength = row.length();
        String previousRow = row;


        while (currentLength != 1) {
            final StringBuilder currentRow = new StringBuilder();

            for (int i = 0; i < previousRow.length() - 1; i++) {
                final char first = previousRow.charAt(i);
                final char second = previousRow.charAt(i + 1);
                if (first == second) {
                    currentRow.append(first);
                } else currentRow.append(estimateColor(first,second));
            }

            currentLength--;
            previousRow = currentRow.toString();
        }
        return previousRow.charAt(0);
    }

    private static char estimateColor(final char first, final char second) {
        boolean isR = first == 'R' || second == 'R';
        boolean isG = first == 'G' || second == 'G';

        if (!isR) {
            return 'R';
        } else if (!isG) {
            return 'G';
        }

        return 'B';
    }

    @Test
    public void examples() {
        // assertEquals("expected", "actual");
        assertEquals('R', triangle("GB"));
        assertEquals('R', triangle("RRR"));
        assertEquals('B', triangle("RGBG"));
        assertEquals('G', triangle("RBRGBRB"));
        assertEquals('G', triangle("RBRGBRBGGRRRBGBBBGG"));
        assertEquals('B', triangle("B"));
    }
}
